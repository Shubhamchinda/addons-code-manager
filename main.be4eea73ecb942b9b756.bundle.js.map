{"version":3,"file":"main.be4eea73ecb942b9b756.bundle.js","sources":["webpack:///./src/utils.tsx"],"sourcesContent":["import urlUtils from 'url';\n\nimport filesize from 'filesize';\nimport purify from 'dompurify';\nimport { History } from 'history';\nimport queryString from 'query-string';\n\nimport { getCodeLineAnchor } from './components/CodeView/utils';\nimport { ForwardComparisonMap } from './pages/Compare/utils';\nimport { CompareInfo } from './reducers/versions';\n\n// Querystring params used by the app.\nexport const messageUidQueryParam = 'messageUid';\nexport const pathQueryParam = 'path';\n\nexport type LocalizedStringMap = {\n  [lang: string]: string;\n};\n\nexport const gettext = (text: string) => text;\n\nexport const getLocalizedString = (\n  localizedStringMap: LocalizedStringMap,\n  lang = process.env.REACT_APP_DEFAULT_API_LANG as string,\n) => {\n  return localizedStringMap[lang];\n};\n\nexport const getLanguageFromMimeType = (mimeType: string) => {\n  switch (mimeType) {\n    case 'application/javascript':\n    case 'text/javascript':\n      return 'js';\n    case 'application/json':\n      return 'json';\n    case 'application/xml':\n      return 'xml';\n    case 'text/css':\n      return 'css';\n    case 'text/html':\n      return 'html';\n    default:\n      return 'text';\n  }\n};\n\nexport const sanitizeHTML = (\n  text: string,\n  allowTags: string[] = [],\n  _purify = purify,\n) => {\n  return {\n    __html: _purify.sanitize(text, { ALLOWED_TAGS: allowTags }),\n  };\n};\n\nexport const nl2br = (text: string | null) => {\n  return (text || '').replace(/(\\r\\n|\\r|\\n)(?!<\\/?(li|ul|ol)>)/g, '<br />');\n};\n\nexport const formatFilesize = (size: number): string => {\n  return filesize(size, { standard: 'iec' });\n};\n\nexport const getPathFromQueryString = (history: History) => {\n  const path = queryString.parse(history.location.search)[pathQueryParam];\n\n  return typeof path === 'string' && path.length ? path : null;\n};\n\nexport const createCodeLineAnchorGetter = ({\n  compareInfo,\n}: {\n  compareInfo: CompareInfo | null | void;\n}) => {\n  if (compareInfo && compareInfo.diff) {\n    const map = new ForwardComparisonMap(compareInfo.diff);\n    return map.createCodeLineAnchorGetter();\n  }\n  return getCodeLineAnchor;\n};\n\nexport const extractNumber = (text: string): number | null => {\n  const matches = text.match(/\\d+/);\n  if (Array.isArray(matches)) {\n    return parseInt(matches[0], 10);\n  }\n  return null;\n};\n\ntype MakReviewersURLParams = {\n  apiHost?: string | null;\n  reviewersHost?: string | null;\n  url: string;\n  useInsecureProxy?: boolean;\n};\n\nexport const makeReviewersURL = ({\n  reviewersHost = process.env.REACT_APP_REVIEWERS_HOST,\n  url,\n  useInsecureProxy = process.env.REACT_APP_USE_INSECURE_PROXY === 'true',\n}: MakReviewersURLParams) => {\n  const { path } = urlUtils.parse(url);\n  if (reviewersHost && !useInsecureProxy) {\n    return `${reviewersHost}${path}`;\n  }\n\n  return path;\n};\n"],"mappings":"AAAA","sourceRoot":""}